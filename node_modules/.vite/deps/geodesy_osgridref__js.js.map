{
  "version": 3,
  "sources": ["../../geodesy/osgridref.js"],
  "sourcesContent": ["/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n/* Ordnance Survey Grid Reference functions                           (c) Chris Veness 2005-2021  */\n/*                                                                                   MIT Licence  */\n/* www.movable-type.co.uk/scripts/latlong-gridref.html                                            */\n/* www.movable-type.co.uk/scripts/geodesy-library.html#osgridref                                  */\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nimport LatLonEllipsoidal, { Dms } from './latlon-ellipsoidal-datum.js';\n\n\n/**\n * Ordnance Survey OSGB grid references provide geocoordinate references for UK mapping purposes.\n *\n * Formulation implemented here due to Thomas, Redfearn, etc is as published by OS, but is inferior\n * to Krüger as used by e.g. Karney 2011.\n *\n * www.ordnancesurvey.co.uk/documents/resources/guide-coordinate-systems-great-britain.pdf.\n *\n * Note OSGB grid references cover Great Britain only; Ireland and the Channel Islands have their\n * own references.\n *\n * Note that these formulae are based on ellipsoidal calculations, and according to the OS are\n * accurate to about 4–5 metres – for greater accuracy, a geoid-based transformation (OSTN15) must\n * be used.\n */\n\n/*\n * Converted 2015 to work with WGS84 by default, OSGB36 as option;\n * www.ordnancesurvey.co.uk/blog/2014/12/confirmation-on-changes-to-latitude-and-longitude\n */\n\n\n/* OsGridRef  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */\n\n\nconst nationalGrid = {\n    trueOrigin:  { lat: 49, lon: -2 },                 // true origin of grid 49°N,2°W on OSGB36 datum\n    falseOrigin: { easting: -400e3, northing: 100e3 }, // easting & northing of false origin, metres from true origin\n    scaleFactor: 0.9996012717,                         // scale factor on central meridian\n    ellipsoid:   LatLonEllipsoidal.ellipsoids.Airy1830,\n};\n// note Irish National Grid uses t/o 53°30′N, 8°W, f/o 200kmW, 250kmS, scale factor 1.000035, on Airy 1830 Modified ellipsoid\n\n\n/**\n * OS Grid References with methods to parse and convert them to latitude/longitude points.\n */\nclass OsGridRef {\n\n    /**\n     * Creates an OsGridRef object.\n     *\n     * @param {number} easting - Easting in metres from OS Grid false origin.\n     * @param {number} northing - Northing in metres from OS Grid false origin.\n     *\n     * @example\n     *   import OsGridRef from '/js/geodesy/osgridref.js';\n     *   const gridref = new OsGridRef(651409, 313177);\n     */\n    constructor(easting, northing) {\n        this.easting = Number(easting);\n        this.northing = Number(northing);\n\n        if (isNaN(easting)  || this.easting<0  || this.easting>700e3) throw new RangeError(`invalid easting ‘${easting}’`);\n        if (isNaN(northing) || this.northing<0 || this.northing>1300e3) throw new RangeError(`invalid northing ‘${northing}’`);\n    }\n\n\n    /**\n     * Converts ‘this’ Ordnance Survey Grid Reference easting/northing coordinate to latitude/longitude\n     * (SW corner of grid square).\n     *\n     * While OS Grid References are based on OSGB-36, the Ordnance Survey have deprecated the use of\n     * OSGB-36 for latitude/longitude coordinates (in favour of WGS-84), hence this function returns\n     * WGS-84 by default, with OSGB-36 as an option. See www.ordnancesurvey.co.uk/blog/2014/12/2.\n     *\n     * Note formulation implemented here due to Thomas, Redfearn, etc is as published by OS, but is\n     * inferior to Krüger as used by e.g. Karney 2011.\n     *\n     * @param   {LatLon.datum} [datum=WGS84] - Datum to convert grid reference into.\n     * @returns {LatLon}       Latitude/longitude of supplied grid reference.\n     *\n     * @example\n     *   const gridref = new OsGridRef(651409.903, 313177.270);\n     *   const pWgs84 = gridref.toLatLon();                    // 52°39′28.723″N, 001°42′57.787″E\n     *   // to obtain (historical) OSGB36 lat/lon point:\n     *   const pOsgb = gridref.toLatLon(LatLon.datums.OSGB36); // 52°39′27.253″N, 001°43′04.518″E\n     */\n    toLatLon(datum=LatLonEllipsoidal.datums.WGS84) {\n        const { easting: E, northing: N } = this;\n\n        const { a, b } = nationalGrid.ellipsoid;            // a = 6377563.396, b = 6356256.909\n        const φ0 = nationalGrid.trueOrigin.lat.toRadians(); // latitude of true origin, 49°N\n        const λ0 = nationalGrid.trueOrigin.lon.toRadians(); // longitude of true origin, 2°W\n        const E0 = -nationalGrid.falseOrigin.easting;       // easting of true origin, 400km\n        const N0 = -nationalGrid.falseOrigin.northing;      // northing of true origin, -100km\n        const F0 = nationalGrid.scaleFactor;                // 0.9996012717\n\n        const e2 = 1 - (b*b)/(a*a);                         // eccentricity squared\n        const n = (a-b)/(a+b), n2 = n*n, n3 = n*n*n;        // n, n², n³\n\n        let φ=φ0, M=0;\n        do {\n            φ = (N-N0-M)/(a*F0) + φ;\n\n            const Ma = (1 + n + (5/4)*n2 + (5/4)*n3) * (φ-φ0);\n            const Mb = (3*n + 3*n*n + (21/8)*n3) * Math.sin(φ-φ0) * Math.cos(φ+φ0);\n            const Mc = ((15/8)*n2 + (15/8)*n3) * Math.sin(2*(φ-φ0)) * Math.cos(2*(φ+φ0));\n            const Md = (35/24)*n3 * Math.sin(3*(φ-φ0)) * Math.cos(3*(φ+φ0));\n            M = b * F0 * (Ma - Mb + Mc - Md);                // meridional arc\n\n        } while (Math.abs(N-N0-M) >= 0.00001);  // ie until < 0.01mm\n\n        const cosφ = Math.cos(φ), sinφ = Math.sin(φ);\n        const ν = a*F0/Math.sqrt(1-e2*sinφ*sinφ);            // nu = transverse radius of curvature\n        const ρ = a*F0*(1-e2)/Math.pow(1-e2*sinφ*sinφ, 1.5); // rho = meridional radius of curvature\n        const η2 = ν/ρ-1;                                    // eta = ?\n\n        const tanφ = Math.tan(φ);\n        const tan2φ = tanφ*tanφ, tan4φ = tan2φ*tan2φ, tan6φ = tan4φ*tan2φ;\n        const secφ = 1/cosφ;\n        const ν3 = ν*ν*ν, ν5 = ν3*ν*ν, ν7 = ν5*ν*ν;\n        const VII = tanφ/(2*ρ*ν);\n        const VIII = tanφ/(24*ρ*ν3)*(5+3*tan2φ+η2-9*tan2φ*η2);\n        const IX = tanφ/(720*ρ*ν5)*(61+90*tan2φ+45*tan4φ);\n        const X = secφ/ν;\n        const XI = secφ/(6*ν3)*(ν/ρ+2*tan2φ);\n        const XII = secφ/(120*ν5)*(5+28*tan2φ+24*tan4φ);\n        const XIIA = secφ/(5040*ν7)*(61+662*tan2φ+1320*tan4φ+720*tan6φ);\n\n        const dE = (E-E0), dE2 = dE*dE, dE3 = dE2*dE, dE4 = dE2*dE2, dE5 = dE3*dE2, dE6 = dE4*dE2, dE7 = dE5*dE2;\n        φ = φ - VII*dE2 + VIII*dE4 - IX*dE6;\n        const λ = λ0 + X*dE - XI*dE3 + XII*dE5 - XIIA*dE7;\n\n        let point = new LatLon_OsGridRef(φ.toDegrees(), λ.toDegrees(), 0, LatLonEllipsoidal.datums.OSGB36);\n\n        if (datum != LatLonEllipsoidal.datums.OSGB36) {\n            // if point is required in datum other than OSGB36, convert it\n            point = point.convertDatum(datum);\n            // convertDatum() gives us a LatLon: convert to LatLon_OsGridRef which includes toOsGrid()\n            point = new LatLon_OsGridRef(point.lat, point.lon, point.height, point.datum);\n        }\n\n        return point;\n    }\n\n\n    /**\n     * Parses grid reference to OsGridRef object.\n     *\n     * Accepts standard grid references (eg 'SU 387 148'), with or without whitespace separators, from\n     * two-digit references up to 10-digit references (1m × 1m square), or fully numeric comma-separated\n     * references in metres (eg '438700,114800').\n     *\n     * @param   {string}    gridref - Standard format OS Grid Reference.\n     * @returns {OsGridRef} Numeric version of grid reference in metres from false origin (SW corner of\n     *   supplied grid square).\n     * @throws  {Error}     Invalid grid reference.\n     *\n     * @example\n     *   const grid = OsGridRef.parse('TG 51409 13177'); // grid: { easting: 651409, northing: 313177 }\n     */\n    static parse(gridref) {\n        gridref = String(gridref).trim();\n\n        // check for fully numeric comma-separated gridref format\n        let match = gridref.match(/^(\\d+),\\s*(\\d+)$/);\n        if (match) return new OsGridRef(match[1], match[2]);\n\n        // validate format\n        match = gridref.match(/^[HNST][ABCDEFGHJKLMNOPQRSTUVWXYZ]\\s*[0-9]+\\s*[0-9]+$/i);\n        if (!match) throw new Error(`invalid grid reference ‘${gridref}’`);\n\n        // get numeric values of letter references, mapping A->0, B->1, C->2, etc:\n        let l1 = gridref.toUpperCase().charCodeAt(0) - 'A'.charCodeAt(0); // 500km square\n        let l2 = gridref.toUpperCase().charCodeAt(1) - 'A'.charCodeAt(0); // 100km square\n        // shuffle down letters after 'I' since 'I' is not used in grid:\n        if (l1 > 7) l1--;\n        if (l2 > 7) l2--;\n\n        // convert grid letters into 100km-square indexes from false origin (grid square SV):\n        const e100km = ((l1 - 2) % 5) * 5 + (l2 % 5);\n        const n100km = (19 - Math.floor(l1 / 5) * 5) - Math.floor(l2 / 5);\n\n        // skip grid letters to get numeric (easting/northing) part of ref\n        let en = gridref.slice(2).trim().split(/\\s+/);\n        // if e/n not whitespace separated, split half way\n        if (en.length == 1) en = [ en[0].slice(0, en[0].length / 2), en[0].slice(en[0].length / 2) ];\n\n        // validation\n        if (en[0].length != en[1].length) throw new Error(`invalid grid reference ‘${gridref}’`);\n\n        // standardise to 10-digit refs (metres)\n        en[0] = en[0].padEnd(5, '0');\n        en[1] = en[1].padEnd(5, '0');\n\n        const e = e100km + en[0];\n        const n = n100km + en[1];\n\n        return new OsGridRef(e, n);\n    }\n\n\n    /**\n     * Converts ‘this’ numeric grid reference to standard OS Grid Reference.\n     *\n     * @param   {number} [digits=10] - Precision of returned grid reference (10 digits = metres);\n     *   digits=0 will return grid reference in numeric format.\n     * @returns {string} This grid reference in standard format.\n     *\n     * @example\n     *   const gridref = new OsGridRef(651409, 313177).toString(8); // 'TG 5140 1317'\n     *   const gridref = new OsGridRef(651409, 313177).toString(0); // '651409,313177'\n     */\n    toString(digits=10) {\n        if (![ 0,2,4,6,8,10,12,14,16 ].includes(Number(digits))) throw new RangeError(`invalid precision ‘${digits}’`); // eslint-disable-line comma-spacing\n\n        let { easting: e, northing: n } = this;\n\n        // use digits = 0 to return numeric format (in metres) - note northing may be >= 1e7\n        if (digits == 0) {\n            const format = { useGrouping: false,  minimumIntegerDigits: 6, maximumFractionDigits: 3 };\n            const ePad = e.toLocaleString('en', format);\n            const nPad = n.toLocaleString('en', format);\n            return `${ePad},${nPad}`;\n        }\n\n        // get the 100km-grid indices\n        const e100km = Math.floor(e / 100000), n100km = Math.floor(n / 100000);\n\n        // translate those into numeric equivalents of the grid letters\n        let l1 = (19 - n100km) - (19 - n100km) % 5 + Math.floor((e100km + 10) / 5);\n        let l2 = (19 - n100km) * 5 % 25 + e100km % 5;\n\n        // compensate for skipped 'I' and build grid letter-pairs\n        if (l1 > 7) l1++;\n        if (l2 > 7) l2++;\n        const letterPair = String.fromCharCode(l1 + 'A'.charCodeAt(0), l2 + 'A'.charCodeAt(0));\n\n        // strip 100km-grid indices from easting & northing, and reduce precision\n        e = Math.floor((e % 100000) / Math.pow(10, 5 - digits / 2));\n        n = Math.floor((n % 100000) / Math.pow(10, 5 - digits / 2));\n\n        // pad eastings & northings with leading zeros\n        e = e.toString().padStart(digits/2, '0');\n        n = n.toString().padStart(digits/2, '0');\n\n        return `${letterPair} ${e} ${n}`;\n    }\n\n}\n\n\n/* LatLon_OsGridRef - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */\n\n\n/**\n * Extends LatLon class with method to convert LatLon point to OS Grid Reference.\n *\n * @extends LatLonEllipsoidal\n */\nclass LatLon_OsGridRef extends LatLonEllipsoidal {\n\n    /**\n     * Converts latitude/longitude to Ordnance Survey grid reference easting/northing coordinate.\n     *\n     * @returns {OsGridRef} OS Grid Reference easting/northing.\n     *\n     * @example\n     *   const grid = new LatLon(52.65798, 1.71605).toOsGrid(); // TG 51409 13177\n     *   // for conversion of (historical) OSGB36 latitude/longitude point:\n     *   const grid = new LatLon(52.65798, 1.71605).toOsGrid(LatLon.datums.OSGB36);\n     */\n    toOsGrid() {\n        // if necessary convert to OSGB36 first\n        const point = this.datum == LatLonEllipsoidal.datums.OSGB36\n            ? this\n            : this.convertDatum(LatLonEllipsoidal.datums.OSGB36);\n\n        const φ = point.lat.toRadians();\n        const λ = point.lon.toRadians();\n\n        const { a, b } = nationalGrid.ellipsoid;            // a = 6377563.396, b = 6356256.909\n        const φ0 = nationalGrid.trueOrigin.lat.toRadians(); // latitude of true origin, 49°N\n        const λ0 = nationalGrid.trueOrigin.lon.toRadians(); // longitude of true origin, 2°W\n        const E0 = -nationalGrid.falseOrigin.easting;       // easting of true origin, 400km\n        const N0 = -nationalGrid.falseOrigin.northing;      // northing of true origin, -100km\n        const F0 = nationalGrid.scaleFactor;                // 0.9996012717\n\n        const e2 = 1 - (b*b)/(a*a);                          // eccentricity squared\n        const n = (a-b)/(a+b), n2 = n*n, n3 = n*n*n;         // n, n², n³\n\n        const cosφ = Math.cos(φ), sinφ = Math.sin(φ);\n        const ν = a*F0/Math.sqrt(1-e2*sinφ*sinφ);            // nu = transverse radius of curvature\n        const ρ = a*F0*(1-e2)/Math.pow(1-e2*sinφ*sinφ, 1.5); // rho = meridional radius of curvature\n        const η2 = ν/ρ-1;                                    // eta = ?\n\n        const Ma = (1 + n + (5/4)*n2 + (5/4)*n3) * (φ-φ0);\n        const Mb = (3*n + 3*n*n + (21/8)*n3) * Math.sin(φ-φ0) * Math.cos(φ+φ0);\n        const Mc = ((15/8)*n2 + (15/8)*n3) * Math.sin(2*(φ-φ0)) * Math.cos(2*(φ+φ0));\n        const Md = (35/24)*n3 * Math.sin(3*(φ-φ0)) * Math.cos(3*(φ+φ0));\n        const M = b * F0 * (Ma - Mb + Mc - Md);              // meridional arc\n\n        const cos3φ = cosφ*cosφ*cosφ;\n        const cos5φ = cos3φ*cosφ*cosφ;\n        const tan2φ = Math.tan(φ)*Math.tan(φ);\n        const tan4φ = tan2φ*tan2φ;\n\n        const I = M + N0;\n        const II = (ν/2)*sinφ*cosφ;\n        const III = (ν/24)*sinφ*cos3φ*(5-tan2φ+9*η2);\n        const IIIA = (ν/720)*sinφ*cos5φ*(61-58*tan2φ+tan4φ);\n        const IV = ν*cosφ;\n        const V = (ν/6)*cos3φ*(ν/ρ-tan2φ);\n        const VI = (ν/120) * cos5φ * (5 - 18*tan2φ + tan4φ + 14*η2 - 58*tan2φ*η2);\n\n        const Δλ = λ-λ0;\n        const Δλ2 = Δλ*Δλ, Δλ3 = Δλ2*Δλ, Δλ4 = Δλ3*Δλ, Δλ5 = Δλ4*Δλ, Δλ6 = Δλ5*Δλ;\n\n        let N = I + II*Δλ2 + III*Δλ4 + IIIA*Δλ6;\n        let E = E0 + IV*Δλ + V*Δλ3 + VI*Δλ5;\n\n        N = Number(N.toFixed(3)); // round to mm precision\n        E = Number(E.toFixed(3));\n\n        try {\n            return new OsGridRef(E, N); // note: gets truncated to SW corner of 1m grid square\n        } catch (e) {\n            throw new Error(`${e.message} from (${point.lat.toFixed(6)},${point.lon.toFixed(6)}).toOsGrid()`);\n        }\n    }\n\n\n    /**\n     * Override LatLonEllipsoidal.convertDatum() with version which returns LatLon_OsGridRef.\n     */\n    convertDatum(toDatum) {\n        const osgbED = super.convertDatum(toDatum); // returns LatLonEllipsoidal_Datum\n        const osgbOSGR = new LatLon_OsGridRef(osgbED.lat, osgbED.lon, osgbED.height, osgbED.datum);\n        return osgbOSGR;\n    }\n\n}\n\n\n/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  */\n\nexport { OsGridRef as default, LatLon_OsGridRef as LatLon, Dms };\n"],
  "mappings": "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",
  "names": []
}
