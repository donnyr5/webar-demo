/**
 * Weighted Graphs
 *
 * Graphs are a collection of nodes and connections.
 *  - Think about a network - e.g: facebook, or google maps
 *  - Netflix/IMDB for example when recommending movies.
 *  - Airport connections
 *
 * Types of Graphs
 *
 * Terminology
 *  - Vertex = a node
 *  - Edge = Connection between nodes (the connecting line)
 *  - Weighted / Unweighted = values assigned to distances between vertices
 *  - Directed / Undirected = directions assigned to distanced between vertices
 *
 * Undirected Graph:
 *  - Two way connections
 *   A --- B
 *  - A connects to B, but B also connects to A
 *  - Useful when modeling Airports
 *
 * Directed Graph:
 *  - One way connection
 *  - You can only go into one direction
 *
 * Weighted Graph:
 *  - Assign a numeric value to the edge
 *  - Is a numeric value to represent a weight on that edge.
 *  - Used for example to simulate traffic in google maps
 *
 * How to store them:
 *
 * There are two ways to store them:
 *
 * Adjanacenty Matrix = The data is stored as a Matrix - Mostly O(N*2)
 *  - Takes up more space (Uses not needed space) - think multiplication matix
 *  - Slower
 *  - Faster to lookup specific edge
 *
 * Adjanacenty List = The data is stored in a list (like an array) - Mostly O(1)
 *  - Takes less space (we are only storing the connections)
 *  - Faster to iterate through all edges
 *  - Slow to lookup specific edge (connection)
 */

// No error handling at the moment for the class.

class WeightedGraph {
  adjacenyList;
  constructor() {
    this.adjacenyList = {};
  }

  addVertex(vertex) {
    if (!this.adjacenyList[vertex]) {
      this.adjacenyList[vertex] = [];
    }
  }

  addEdge(vertex1, vertex2, weight) {
    this.adjacenyList[vertex1].push({ node: vertex2, weight });
    this.adjacenyList[vertex2].push({ node: vertex1, weight });
  }

  removeEdge(vertex1, vertex2) {
    this.adjacenyList[vertex1] = this.adjacenyList[vertex1].filter(
      v => v !== vertex2
    );
    this.adjacenyList[vertex2] = this.adjacenyList[vertex2].filter(
      v => v !== vertex1
    );
  }

  removeVertex(vertex) {
    const edges = this.adjacenyList[vertex];
    edges.forEach(e => this.removeEdge(e, vertex));
    delete this.adjacenyList[vertex];
  }
}